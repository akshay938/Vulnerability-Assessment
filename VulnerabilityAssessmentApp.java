import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class VulnerabilityAssessmentApp extends JFrame {
    private JTextField ipAddressField, urlField;
    private JCheckBox xssCheckBox, xFrameCheckBox, hstsCheckBox, cspCheckBox;

    public VulnerabilityAssessmentApp() {
        setTitle("Vulnerability Assessment Tool");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        initUI();
    }

    private void initUI() {
        JTabbedPane tabbedPane = new JTabbedPane();

        // Vulnerability Scanning Tab
        JPanel scanPanel = new JPanel(new BorderLayout());
        JPanel inputPanel = new JPanel();
        ipAddressField = new JTextField(20);
        inputPanel.add(new JLabel("Enter IP Address:"));
        inputPanel.add(ipAddressField);
        JButton scanButton = new JButton("Run Scan");
        scanButton.setPreferredSize(new Dimension(150, 25)); // Set button size
        inputPanel.add(scanButton);
        scanPanel.add(inputPanel, BorderLayout.NORTH);

        scanButton.addActionListener(e -> {
            String ipAddress = ipAddressField.getText();
            if (ipAddress.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid IP address.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                runNmapPortScan(ipAddress);
            }
        });

        tabbedPane.addTab("Vulnerability Scan", scanPanel);

        // Web Security Tab
        JPanel webSecurityPanel = new JPanel(new GridLayout(5, 1));
        urlField = new JTextField(20); // Set same size as IP Address field
        webSecurityPanel.add(new JLabel("Enter URL :"));
        webSecurityPanel.add(urlField);

        xssCheckBox = new JCheckBox("Check for XSS");
        xFrameCheckBox = new JCheckBox("Check for X-Frame");
        hstsCheckBox = new JCheckBox("Check for HSTS");
        cspCheckBox = new JCheckBox("Check for CSP");

        webSecurityPanel.add(xssCheckBox);
        webSecurityPanel.add(xFrameCheckBox);
        webSecurityPanel.add(hstsCheckBox);
        webSecurityPanel.add(cspCheckBox);

        JButton webSecurityButton = new JButton("Check Web Security");
        webSecurityButton.setPreferredSize(new Dimension(120, 25)); // Set same size as Run Scan button
        webSecurityPanel.add(webSecurityButton,BorderLayout.NORTH);

        webSecurityButton.addActionListener(e -> {
            String url = urlField.getText();
            if (url.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid URL.", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                checkWebSecurityHeaders(url);
            }
        });

        tabbedPane.addTab("Web Security Check", webSecurityPanel);

        // Add tabbedPane to the frame
        add(tabbedPane, BorderLayout.NORTH);
    }

    private void runNmapPortScan(String ipAddress) {
        // Create a new window for scan results
        JFrame resultFrame = new JFrame("Scan Results for IP: " + ipAddress);
        resultFrame.setSize(600, 400);
        resultFrame.setLocationRelativeTo(null);

        JTextArea resultAreaInNewWindow = new JTextArea();
        resultAreaInNewWindow.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(resultAreaInNewWindow);
        resultFrame.add(scrollPane);

        JButton saveReportButton = new JButton("Generate Report");
        saveReportButton.setPreferredSize(new Dimension(150, 25)); // Set button size
        resultFrame.add(saveReportButton, BorderLayout.SOUTH); // Add button to the result window

        saveReportButton.addActionListener(e -> {
            try {
                FileWriter writer = new FileWriter("vulnerability_report.txt");
                writer.write(resultAreaInNewWindow.getText());
                writer.close();
                JOptionPane.showMessageDialog(this, "Report generated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error generating report: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        resultFrame.setVisible(true); // Show the new window

        new Thread(() -> {
            try {
                String nmapPath = "C:\\Program Files (x86)\\Nmap\\nmap.exe"; // Adjust path for Windows
                ProcessBuilder builder = new ProcessBuilder(nmapPath, "-sV", ipAddress);
                Process process = builder.start();
                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                String line;
                while ((line = reader.readLine()) != null) {
                    resultAreaInNewWindow.append(line + "\n");
                }
                process.waitFor();

                // Add mitigation suggestions based on open ports
                resultAreaInNewWindow.append("\nMitigations:\n");
                resultAreaInNewWindow.append("Close unused ports, enable firewall, and regularly patch software.\n");
            } catch (Exception ex) {
                ex.printStackTrace();
                resultAreaInNewWindow.append("Error: " + ex.getMessage() + "\n");
            }
        }).start();
    }

    @SuppressWarnings("deprecation")
    private void checkWebSecurityHeaders(String url) {
        // Create a new window for web security check results
        JFrame webSecurityResultFrame = new JFrame("Web Security Check Results for URL: " + url);
        webSecurityResultFrame.setSize(600, 400);
        webSecurityResultFrame.setLocationRelativeTo(null);

        JTextArea webSecurityResultArea = new JTextArea();
        webSecurityResultArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(webSecurityResultArea);
        webSecurityResultFrame.add(scrollPane);

        JButton saveReportButton = new JButton("Generate Report");
        saveReportButton.setPreferredSize(new Dimension(150, 25)); // Set button size
        webSecurityResultFrame.add(saveReportButton, BorderLayout.SOUTH); // Add button to the result window

        saveReportButton.addActionListener(e -> {
            try {
                FileWriter writer = new FileWriter("websecurity_report.txt");
                writer.write(webSecurityResultArea.getText());
                writer.close();
                JOptionPane.showMessageDialog(this, "Report generated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error generating report: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        webSecurityResultFrame.setVisible(true); // Show the new window

        new Thread(() -> {
            try {
                URL targetUrl = new URL(url);  // Deprecated constructor
                HttpURLConnection connection = (HttpURLConnection) targetUrl.openConnection();
                connection.setRequestMethod("HEAD");
                connection.connect();

                if (xssCheckBox.isSelected()) {
                    String xssHeader = connection.getHeaderField("X-XSS-Protection");
                    if (xssHeader == null) {
                        webSecurityResultArea.append("XSS Protection: Not Enabled\n");
                        webSecurityResultArea.append("Mitigation: Add X-XSS-Protection header with value '1; mode=block'\n");
                    } else {
                        webSecurityResultArea.append("XSS Protection: Enabled\n");
                    }
                }

                if (xFrameCheckBox.isSelected()) {
                    String xFrameHeader = connection.getHeaderField("X-Frame-Options");
                    if (xFrameHeader == null) {
                        webSecurityResultArea.append("X-Frame Protection: Not Enabled\n");
                        webSecurityResultArea.append("Mitigation: Add X-Frame-Options header with value 'DENY' or 'SAMEORIGIN'\n");
                    } else {
                        webSecurityResultArea.append("X-Frame Protection: Enabled\n");
                    }
                }

                if (hstsCheckBox.isSelected()) {
                    String hstsHeader = connection.getHeaderField("Strict-Transport-Security");
                    if (hstsHeader == null) {
                        webSecurityResultArea.append("HSTS: Not Enabled\n");
                        webSecurityResultArea.append("Mitigation: Add Strict-Transport-Security header with a max-age directive\n");
                    } else {
                        webSecurityResultArea.append("HSTS: Enabled\n");
                    }
                }

                if (cspCheckBox.isSelected()) {
                    String cspHeader = connection.getHeaderField("Content-Security-Policy");
                    if (cspHeader == null) {
                        webSecurityResultArea.append("Content Security Policy: Not Enabled\n");
                        webSecurityResultArea.append("Mitigation: Add Content-Security-Policy header\n");
                    } else {
                        webSecurityResultArea.append("Content Security Policy: Enabled\n");
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
                webSecurityResultArea.append("Error: " + ex.getMessage() + "\n");
            }
        }).start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            VulnerabilityAssessmentApp app = new VulnerabilityAssessmentApp();
            app.setVisible(true);
        });
    }
}
